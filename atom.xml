<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dream&#39;s Blog</title>
  <subtitle>One day...</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://dreamwuhi.github.io/"/>
  <updated>2016-04-11T10:08:41.235Z</updated>
  <id>http://dreamwuhi.github.io/</id>
  
  <author>
    <name>Dream_Whui</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C++基础知识(1)</title>
    <link href="http://dreamwuhi.github.io/2016/04/11/C++%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86(1)/"/>
    <id>http://dreamwuhi.github.io/2016/04/11/C++基础知识(1)/</id>
    <published>2016-04-11T08:09:22.000Z</published>
    <updated>2016-04-11T10:08:41.235Z</updated>
    
    <content type="html">&lt;h3 id=&quot;New和Delete&quot;&gt;&lt;a href=&quot;#New和Delete&quot; class=&quot;headerlink&quot; title=&quot;New和Delete&quot;&gt;&lt;/a&gt;New和Delete&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;内置类型对象或未提供默认构造函数的类类型对象必须显示初始化&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;int* a = new int;		//a未初始化&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int* b = new int();		//b初始化为0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;delete后，应该将指针赋值为NULL，否则该指针成为“悬垂指针”，悬垂指针是指向曾经存放对象的内存，但该对象已经不再存在了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;C++保证：删除0值的指针是安全的&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;显示类型转换&quot;&gt;&lt;a href=&quot;#显示类型转换&quot; class=&quot;headerlink&quot; title=&quot;显示类型转换&quot;&gt;&lt;/a&gt;显示类型转换&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;调用方式：&lt;/strong&gt; cast-name&lt;type&gt;(expression)&lt;/type&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;static_cast&lt;/strong&gt;&lt;br&gt;  编译器隐式的执行任何类型转换&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;void* p = &amp;amp;d;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;double* dp = static_cast&amp;lt;double*&amp;gt;p;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;dynamic_cast&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;const_cast&lt;/strong&gt;&lt;br&gt;  转换掉表达式的const性质&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;reinterpret_cast&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;类成员函数的重载&quot;&gt;&lt;a href=&quot;#类成员函数的重载&quot; class=&quot;headerlink&quot; title=&quot;类成员函数的重载&quot;&gt;&lt;/a&gt;类成员函数的重载&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;函数名相同，函数的参数不同，返回值可以不同。注意：基于成员函数是否为const,可以重载一个成员函数&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;类的inline函数&quot;&gt;&lt;a href=&quot;#类的inline函数&quot; class=&quot;headerlink&quot; title=&quot;类的inline函数&quot;&gt;&lt;/a&gt;类的inline函数&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;编译器会自动展开函数的定义。注意点：一般函数的代码量很小，且该函数会被经常调用。同时，该函数的定义必须被调用它的源文件可见。通常，内联函数的定义是放在某公共头文件中。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;类的成员使用类声明&quot;&gt;&lt;a href=&quot;#类的成员使用类声明&quot; class=&quot;headerlink&quot; title=&quot;类的成员使用类声明&quot;&gt;&lt;/a&gt;类的成员使用类声明&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;只有当类的定义已经在前面出现过数据成员才能被指定为该类类型。如果该类型是不完全类型（即只声明未定义），那么数据成员只能是指向该类类型的指针或者是引用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;类的构造函数初始化&quot;&gt;&lt;a href=&quot;#类的构造函数初始化&quot; class=&quot;headerlink&quot; title=&quot;类的构造函数初始化&quot;&gt;&lt;/a&gt;类的构造函数初始化&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;构造函数的初始化列表会在构造函数体内语句之前运行。&lt;/li&gt;
&lt;li&gt;如果没有显式初始化列表，那么对于类类型的成员变量使用该成员变量的默认构造函数初始化。对于内置类型或者是复合类型的成员变量根据对象是否为全局而定。（全局对象则会初始化，局部对象不会初始化）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注意&lt;/strong&gt;：对于const成员变量或者是引用类型成员变量及没有默认构造函数的类类型成员变量必须在显式初始化列表。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;构造函数的隐式转换&quot;&gt;&lt;a href=&quot;#构造函数的隐式转换&quot; class=&quot;headerlink&quot; title=&quot;构造函数的隐式转换&quot;&gt;&lt;/a&gt;构造函数的隐式转换&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;一般只带一个参数的构造函数会出现隐式转换，或者是构造函数的第二参数带有默认值&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class A&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 A()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 A(int a)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		num = a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;private:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	int num;	 	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;A a = 12 //隐式的调用构造函数，再调用复制构造函数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;A b(12); //显示的调用构造函数&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;隐式转换一般会带来不好的影响，最好的处理方法是加上&lt;strong&gt;explicit&lt;/strong&gt;关键字，指定构造函数不能隐式转换。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;友元&quot;&gt;&lt;a href=&quot;#友元&quot; class=&quot;headerlink&quot; title=&quot;友元&quot;&gt;&lt;/a&gt;友元&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;允许一个类将对其非公有成员的访问授予指定的函数或类&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;static类成员&quot;&gt;&lt;a href=&quot;#static类成员&quot; class=&quot;headerlink&quot; title=&quot;static类成员&quot;&gt;&lt;/a&gt;static类成员&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;非static数据成员存在于类类型的每一个对象中。static数据成员独立于该类的任意对象而存在；每个static数据成员与类关联的对象，并不与类的对象关联。&lt;/li&gt;
&lt;li&gt;static成员函数只能访问static成员变量，不能直接使用非static成员变量。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;复制构造函数&quot;&gt;&lt;a href=&quot;#复制构造函数&quot; class=&quot;headerlink&quot; title=&quot;复制构造函数&quot;&gt;&lt;/a&gt;复制构造函数&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;调用时间&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根据另一个同类型的对象显示或者是隐式初始化一个对象&lt;/li&gt;
&lt;li&gt;复制一个对象，将它作为实参传给一个函数&lt;/li&gt;
&lt;li&gt;从函数返回时复制对象&lt;/li&gt;
&lt;li&gt;&lt;p&gt;初始化顺序容器中的元素&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;std::vector&amp;lt;std::string&amp;gt;(10);//先调用string的默认构造函数，再调用复制构造函数&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;根据元素初始化式初列表初始化数组元素&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;A a[] = &amp;#123;std::string(&amp;quot;abc&amp;quot;),std::string(&amp;quot;bca&amp;quot;)&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//首先调用A中接受string形参的构造函数初始化一个临时对象，再调用A的复制构造函数初始化&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;具体例子&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;string null_book = &amp;quot;99999&amp;quot;;//首先调用接受一个C风格字符串形参的构造函数，再调用复制构造函数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;string empty_copy = string();//首先调用默认构造函数，再调用复制构造函数&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;智能指针&quot;&gt;&lt;a href=&quot;#智能指针&quot; class=&quot;headerlink&quot; title=&quot;智能指针&quot;&gt;&lt;/a&gt;智能指针&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;当类中含有指针成员的时候，不重写赋值构造函数，复制构造函数，析构函数的话，很容易使程序崩溃&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;原因：&lt;/strong&gt; 编译器为我们合成的复制、赋值函数，都只是浅层拷贝，不是深层拷贝（指针指向同一个对象），因此往往会在析构的时候，出现异常。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;解决方法1：&lt;/strong&gt;定义智能指针，引入&lt;strong&gt;使用计数&lt;/strong&gt;概念&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class U_Ptr&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;private:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	friend class HasPtr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	int *ip;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	size_t use;//使用计数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	U_Ptr(int* p) : ip(p) , use(1) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	~U_Ptr()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		delete ip;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class HasPtr&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	HasPtr(int*p , int i) : ptr(new U_Ptr(p)) , val(i) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	HasPtr(const HasPtr&amp;amp; orig) : ptr(orig.ptr), val(orig.val) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ptr-&amp;gt;use++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	HasPtr&amp;amp; operator=(const HasPtr&amp;amp; rhs)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		++rhs.ptr-&amp;gt;use;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		if(--ptr-&amp;gt;use == 0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			delete ptr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ptr = rhs.ptr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		val = rhs.val;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		return *this;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	~HasPtr()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		if(--ptr-&amp;gt;use == 0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			delete ptr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;private:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	U_Ptr *ptr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	int val;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;解决方法2”&lt;/strong&gt;实现深层拷贝&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class HasPtr&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;private:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	int* ptr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	int val;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	HasPtr(const int&amp;amp; p, int i) : ptr(new int(p)) , val(i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	HasPtr(const HasPtr&amp;amp; orig) : ptr(new int(*orig.ptr)) , val(orig.val)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		//实现深拷贝&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	HasPtr&amp;amp; operator=(HasPtr&amp;amp; rhs)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ptr = rhs.ptr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		val = rhs.val;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		return *this;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;protected成员&quot;&gt;&lt;a href=&quot;#protected成员&quot; class=&quot;headerlink&quot; title=&quot;protected成员&quot;&gt;&lt;/a&gt;protected成员&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;基类的一些成员希望允许派生类访问但是禁止其他用户访问，对于这样的成员应使用受保护的访问标志&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注意点：&lt;/strong&gt;派生类只能通过派生类对象访问其基类的protected成员，派生类对其基类类型对象的protected成员没有特殊访问权限。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class Test_base&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Test_base()&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	~Test_base()&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;protected:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	int pb;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;private:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	int kk;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	/* data */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class Test_sun : public Test_base&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	void fun(Test_sun&amp;amp; t, Test_base&amp;amp; base)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		t.pb = 1;  //派生类对象可以访问基类的protected成员&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		base.pb = 1;//错误，基类类型的对象不能访问其protected对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		pb = 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;New和Delete&quot;&gt;&lt;a href=&quot;#New和Delete&quot; class=&quot;headerlink&quot; title=&quot;New和Delete&quot;&gt;&lt;/a&gt;New和Delete&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;内置类型对象或未提供默认构造函数的类类型对象必须显示初始化
    
    </summary>
    
      <category term="C++" scheme="http://dreamwuhi.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="http://dreamwuhi.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>duilib开发QQ界面</title>
    <link href="http://dreamwuhi.github.io/2016/04/10/duilib%E5%BC%80%E5%8F%91QQ%E7%95%8C%E9%9D%A2/"/>
    <id>http://dreamwuhi.github.io/2016/04/10/duilib开发QQ界面/</id>
    <published>2016-04-10T12:38:01.000Z</published>
    <updated>2016-04-11T10:38:53.598Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
      <category term="QQ界面开发" scheme="http://dreamwuhi.github.io/categories/QQ%E7%95%8C%E9%9D%A2%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="duilib" scheme="http://dreamwuhi.github.io/tags/duilib/"/>
    
      <category term="Win32" scheme="http://dreamwuhi.github.io/tags/Win32/"/>
    
  </entry>
  
  <entry>
    <title>Windows程序设计基础</title>
    <link href="http://dreamwuhi.github.io/2016/04/10/Windows%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/"/>
    <id>http://dreamwuhi.github.io/2016/04/10/Windows程序设计基础/</id>
    <published>2016-04-10T12:02:14.000Z</published>
    <updated>2016-04-11T10:39:50.525Z</updated>
    
    <content type="html">&lt;h2 id=&quot;窗口程序创建的过程&quot;&gt;&lt;a href=&quot;#窗口程序创建的过程&quot; class=&quot;headerlink&quot; title=&quot;窗口程序创建的过程&quot;&gt;&lt;/a&gt;窗口程序创建的过程&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;创建窗口类&quot;&gt;&lt;a href=&quot;#创建窗口类&quot; class=&quot;headerlink&quot; title=&quot;创建窗口类&quot;&gt;&lt;/a&gt;创建窗口类&lt;/h3&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;WNDCLASS wndclass;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h3 id=&quot;注册窗口类&quot;&gt;&lt;a href=&quot;#注册窗口类&quot; class=&quot;headerlink&quot; title=&quot;注册窗口类&quot;&gt;&lt;/a&gt;注册窗口类&lt;/h3&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;RegisterClass(&amp;amp;wndclass);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h3 id=&quot;创建窗口&quot;&gt;&lt;a href=&quot;#创建窗口&quot; class=&quot;headerlink&quot; title=&quot;创建窗口&quot;&gt;&lt;/a&gt;创建窗口&lt;/h3&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hwnd = CreateWindow(...);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h3 id=&quot;显示窗口&quot;&gt;&lt;a href=&quot;#显示窗口&quot; class=&quot;headerlink&quot; title=&quot;显示窗口&quot;&gt;&lt;/a&gt;显示窗口&lt;/h3&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ShowWindow(hwnd,iCmdShow);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h3 id=&quot;更新窗口&quot;&gt;&lt;a href=&quot;#更新窗口&quot; class=&quot;headerlink&quot; title=&quot;更新窗口&quot;&gt;&lt;/a&gt;更新窗口&lt;/h3&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;UpdateWindow(hwnd);  &lt;span class=&quot;comment&quot;&gt;//产生第一条WM_PATINT消息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h3 id=&quot;消息循环&quot;&gt;&lt;a href=&quot;#消息循环&quot; class=&quot;headerlink&quot; title=&quot;消息循环&quot;&gt;&lt;/a&gt;消息循环&lt;/h3&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(GetMessage(&amp;amp;msg,NULL,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;))  &lt;span class=&quot;comment&quot;&gt;//获取消息，只要消息类型不为WM_QUIT，返回值是非零值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	TranslateMessgae(&amp;amp;msg);     &lt;span class=&quot;comment&quot;&gt;//翻译消息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	DispatchMessage(&amp;amp;msg);      &lt;span class=&quot;comment&quot;&gt;//分发消息到窗口过程&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h3 id=&quot;窗口过程&quot;&gt;&lt;a href=&quot;#窗口过程&quot; class=&quot;headerlink&quot; title=&quot;窗口过程&quot;&gt;&lt;/a&gt;窗口过程&lt;/h3&gt;&lt;p&gt;窗口过程在处理消息时，必须返回0。窗口过程不予处理的所有消息应该被DefWindowProc函数处理&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;LRESULT CALLBACK &lt;span class=&quot;title&quot;&gt;WinProctor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(HWND hwnd, UINT message, WPARAM wparam, LPARAM lparam)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;SendMessage(...);&lt;span class=&quot;comment&quot;&gt;//程序可以直接调用自己的窗口过程&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;总结：窗口过程与一个窗口类相关联，窗口类是程序调用RegisterClass注册的。基于该类创建的窗口使用这个窗口过程来处理窗口的所有消息。Windows通过调用窗口过程来给窗口发送一个消息&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;窗口消息&quot;&gt;&lt;a href=&quot;#窗口消息&quot; class=&quot;headerlink&quot; title=&quot;窗口消息&quot;&gt;&lt;/a&gt;窗口消息&lt;/h2&gt;&lt;h3 id=&quot;WM-PAINT&quot;&gt;&lt;a href=&quot;#WM-PAINT&quot; class=&quot;headerlink&quot; title=&quot;WM_PAINT&quot;&gt;&lt;/a&gt;WM_PAINT&lt;/h3&gt;&lt;p&gt;该消息使得客户区域重绘，以下几种情况会导致客户区域重绘，即产生WM_PAINT消息。&lt;br&gt;1、UpdateWindow(hwnd);&lt;br&gt;2、放大或者是缩小窗口（窗口类风格具有CS_HREDRAW,CS_VREDRAW）。&lt;br&gt;3、窗口最小化后，再复原。&lt;br&gt;4、窗口被其他窗口覆盖后，再复原。&lt;br&gt;5、使用ScrollWindow或ScrollDC函数滚动客户区的一部分。&lt;br&gt;6、使用InvalidateRect或InvalidateRgn函数显示产生WM_PAINT消息。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;WM-DESTROY&quot;&gt;&lt;a href=&quot;#WM-DESTROY&quot; class=&quot;headerlink&quot; title=&quot;WM_DESTROY&quot;&gt;&lt;/a&gt;WM_DESTROY&lt;/h3&gt;&lt;p&gt;该消息使得窗口清除关闭。一般在获取该消息后，添加PostQuitMessage(0); 即，在消息队列中添加一条WM_QUIT消息。上文提到，消息循环中当遇到WM_QUIT消息后，就退出循环，结束程序。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;窗口程序创建的过程&quot;&gt;&lt;a href=&quot;#窗口程序创建的过程&quot; class=&quot;headerlink&quot; title=&quot;窗口程序创建的过程&quot;&gt;&lt;/a&gt;窗口程序创建的过程&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;创建窗口类&quot;&gt;&lt;a href=&quot;#创建窗口类&quot; class=&quot;h
    
    </summary>
    
      <category term="Windows开发" scheme="http://dreamwuhi.github.io/categories/Windows%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Win32" scheme="http://dreamwuhi.github.io/tags/Win32/"/>
    
  </entry>
  
  <entry>
    <title>duilib开发微信界面</title>
    <link href="http://dreamwuhi.github.io/2016/04/10/duilib%E5%BC%80%E5%8F%91%E5%BE%AE%E4%BF%A1%E7%95%8C%E9%9D%A2/"/>
    <id>http://dreamwuhi.github.io/2016/04/10/duilib开发微信界面/</id>
    <published>2016-04-10T10:16:23.000Z</published>
    <updated>2016-04-11T10:40:30.068Z</updated>
    
    <content type="html">&lt;h2 id=&quot;采用Duilib开源框架开发PC端微信&quot;&gt;&lt;a href=&quot;#采用Duilib开源框架开发PC端微信&quot; class=&quot;headerlink&quot; title=&quot;采用Duilib开源框架开发PC端微信&quot;&gt;&lt;/a&gt;采用Duilib开源框架开发PC端微信&lt;/h2&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;采用Duilib开源框架开发PC端微信&quot;&gt;&lt;a href=&quot;#采用Duilib开源框架开发PC端微信&quot; class=&quot;headerlink&quot; title=&quot;采用Duilib开源框架开发PC端微信&quot;&gt;&lt;/a&gt;采用Duilib开源框架开发PC端微信&lt;/h2&gt;
    
    </summary>
    
      <category term="微信界面开发" scheme="http://dreamwuhi.github.io/categories/%E5%BE%AE%E4%BF%A1%E7%95%8C%E9%9D%A2%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="duilib" scheme="http://dreamwuhi.github.io/tags/duilib/"/>
    
      <category term="Win32" scheme="http://dreamwuhi.github.io/tags/Win32/"/>
    
  </entry>
  
</feed>
