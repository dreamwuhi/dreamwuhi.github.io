<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dream&#39;s Blog</title>
  <subtitle>One day...</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://dreamwuhi.github.io/"/>
  <updated>2016-05-23T06:22:48.741Z</updated>
  <id>http://dreamwuhi.github.io/</id>
  
  <author>
    <name>Dream_Whui</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Leetcode-Minimum Height Trees</title>
    <link href="http://dreamwuhi.github.io/2016/05/23/Leetcode-Minimum-Height-Trees/"/>
    <id>http://dreamwuhi.github.io/2016/05/23/Leetcode-Minimum-Height-Trees/</id>
    <published>2016-05-23T06:10:34.000Z</published>
    <updated>2016-05-23T06:22:48.741Z</updated>
    
    <content type="html">&lt;p&gt;本题给你一个无向图，其中有n个顶点，n-1条边，因此取其中的任意某顶点作为根，都可以构建成一棵树。那么本题的问题就是在这些树中找出高度最小的树，返回树的根节点；如果有多课树的高度相同，则返回多个根节点。&lt;/p&gt;
&lt;p&gt;思路1：一开始，我认为最直白的解法就是遍历所有的节点，以该节点为根，求此树的高度。最后找出高度最小的树就是答案。此为暴力法，但是暴力一般往往会超时，本题也不例外。所以就得另辟蹊径咯。&lt;/p&gt;
&lt;p&gt;思路2：先找到所有的叶子节点，再删除所有的叶子节点，再继续目前的叶子节点，再删除掉。直到找不到叶子节点为止。那么最后一次找到的叶子节点就是要求的根节点。这题算是trick吧，自己多画几个图，或许可以发现这个规律。&lt;/p&gt;
&lt;p&gt;好了，代码如下。&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; findMinHeightTrees(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n, &lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;pair&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;gt;&amp;amp; edges) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;gt;adj(n);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;//构建邻接表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;edges.size(); ++i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; x = edges[i].first;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; y = edges[i].second;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			adj[x].push_back(y);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			adj[y].push_back(x);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;//处理边缘条件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt;res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(edges.size() == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			res.push_back(edges[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].first);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			res.push_back(edges[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].second);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			return res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(edges.size() == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			return res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;//找叶子节点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;adj.size(); ++i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(adj[i].size() == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				res.push_back(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;//删除叶子节点，再找叶子节点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; next;&lt;span class=&quot;comment&quot;&gt;//保存叶子节点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;res.size(); ++i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; node = res[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;comment&quot;&gt;//删除叶子节点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				adj[adj[node][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]].erase(find(adj[adj[node][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]].begin(),adj[adj[node][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]].end(),node));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(adj[adj[node][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]].size() == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					next.push_back(adj[node][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]);&lt;span class=&quot;comment&quot;&gt;//添加叶子节点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(next.empty())&lt;span class=&quot;comment&quot;&gt;//找不到叶子节点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				return res;	&lt;span class=&quot;comment&quot;&gt;//返回上一次找到的叶子节点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			res = next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;本题给你一个无向图，其中有n个顶点，n-1条边，因此取其中的任意某顶点作为根，都可以构建成一棵树。那么本题的问题就是在这些树中找出高度最小的树，返回树的根节点；如果有多课树的高度相同，则返回多个根节点。&lt;/p&gt;
&lt;p&gt;思路1：一开始，我认为最直白的解法就是遍历所有的节点，以
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Leetcode-House Robber III</title>
    <link href="http://dreamwuhi.github.io/2016/05/22/Leetcode-House-Robber-III/"/>
    <id>http://dreamwuhi.github.io/2016/05/22/Leetcode-House-Robber-III/</id>
    <published>2016-05-22T04:25:25.000Z</published>
    <updated>2016-05-22T04:37:05.415Z</updated>
    
    <content type="html">&lt;p&gt;The thief has found himself a new place for his thievery again. There is only one entrance to this area, called the “root.” Besides the root, each house has one and only one parent house. After a tour, the smart thief realized that “all houses in this place forms a binary tree”. It will automatically contact the police if two directly-linked houses were broken into on the same night.&lt;/p&gt;
&lt;p&gt;Determine the maximum amount of money the thief can rob tonight without alerting the police.&lt;/p&gt;
&lt;p&gt;Example 1:&lt;br&gt;     3&lt;br&gt;    / \&lt;br&gt;   2   3&lt;br&gt;    \   \&lt;br&gt;     3   1&lt;br&gt;Maximum amount of money the thief can rob = 3 + 3 + 1 = 7.&lt;br&gt;Example 2:&lt;br&gt;     3&lt;br&gt;    / \&lt;br&gt;   4   5&lt;br&gt;  / \   \&lt;br&gt; 1   3   1&lt;br&gt;Maximum amount of money the thief can rob = 4 + 5 = 9.&lt;/p&gt;
&lt;p&gt;本题是一道树形DP问题。&lt;br&gt;思路：&lt;br&gt;一颗二叉树可以返回两种结果，选取父节点的结果与未选取父节点的结果。&lt;br&gt;其中，选取了父节点，则左右孩子节点都不能被选取。即F0(root) = root-&amp;gt;val + F1(root-&amp;gt;left) + F1(root-&amp;gt;right).&lt;br&gt;未选取父节点，则左右孩子节点可选可不选，视情况而定。&lt;br&gt;即F1(root) = max(F0(root-&amp;gt;left),F1(root-&amp;gt;left))+max(F0(root-&amp;gt;right),F1(root-&amp;gt;right)).    &lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;The thief has found himself a new place for his thievery again. There is only one entrance to this area, called the “root.” Besides the r
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Leetcode-Binary Tree Paths</title>
    <link href="http://dreamwuhi.github.io/2016/05/21/Leetcode-Binary-Tree-Paths/"/>
    <id>http://dreamwuhi.github.io/2016/05/21/Leetcode-Binary-Tree-Paths/</id>
    <published>2016-05-21T12:42:17.000Z</published>
    <updated>2016-05-21T12:44:58.449Z</updated>
    
    <content type="html">&lt;p&gt;本题要求将二叉树所有的路径输出，是一道简单题，深度优先遍历即可。&lt;br&gt;二叉树节点存储的是Int值，需要将其转化为字符串。&lt;/p&gt;
&lt;p&gt;代码：&lt;br&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;&amp;gt; v;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;i2s&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; val , &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; &amp;amp;tmp)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; pp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(val &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		    tmp += &lt;span class=&quot;string&quot;&gt;&quot;-&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		    val = -val;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(val)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			pp.insert(pp.begin(), &lt;span class=&quot;string&quot;&gt;&#39;0&#39;&lt;/span&gt;+val % &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			val = val / &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		tmp += pp + &lt;span class=&quot;string&quot;&gt;&quot;-&amp;gt;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Traver&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(TreeNode* root, &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; tmp)&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(root)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			i2s(root-&amp;gt;val,tmp);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(root-&amp;gt;left)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				Traver(root-&amp;gt;left,tmp);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(root-&amp;gt;right)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				Traver(root-&amp;gt;right,tmp);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!root-&amp;gt;left &amp;amp;&amp;amp; !root-&amp;gt;right)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				tmp.erase(tmp.begin()+tmp.size()&lt;span class=&quot;number&quot;&gt;-2&lt;/span&gt;,tmp.end());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				v.push_back(tmp);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;&amp;gt; binaryTreePaths(TreeNode* root) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; tmp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Traver(root,tmp);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return v;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本题要求将二叉树所有的路径输出，是一道简单题，深度优先遍历即可。&lt;br&gt;二叉树节点存储的是Int值，需要将其转化为字符串。&lt;/p&gt;
&lt;p&gt;代码：&lt;br&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Leetcode-Palindrome Linked List</title>
    <link href="http://dreamwuhi.github.io/2016/05/19/Leetcode-Palindrome-Linked-List/"/>
    <id>http://dreamwuhi.github.io/2016/05/19/Leetcode-Palindrome-Linked-List/</id>
    <published>2016-05-19T12:03:48.000Z</published>
    <updated>2016-05-19T12:17:48.979Z</updated>
    
    <content type="html">&lt;p&gt;今天看了ICPC-2016WF，瞬间又燃起了刷题的兴趣。研一的时候玩了好几个月，后来由于忙其它的东西就不怎么刷题了。&lt;/p&gt;
&lt;p&gt;这道题是判断链表是否是回文，需要0(N)时间复杂度，0(1)空间复杂度。&lt;br&gt;阶梯思路想到了比较简单，先翻转一半链表，再双指针判断即可。&lt;/p&gt;
&lt;p&gt;例如：链表的如下&lt;br&gt;1-&amp;gt;2-&amp;gt;3-&amp;gt;3-&amp;gt;2-&amp;gt;1，总共有6个元素，可以翻转最后三个元素，得到1-&amp;gt;2-&amp;gt;3-&amp;gt;1-&amp;gt;2-&amp;gt;3。&lt;br&gt;设定两个指针分别指向前半部分的起点与后半部分的起点，再依次比较节点上的元素是否相同即可。&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; ListNode &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; val;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     ListNode *next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     ListNode(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; x) : val(x), next(&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isPalindrome&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ListNode* head)&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; cnt = GetLength(head);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(cnt == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) return &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(cnt % &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	Reverse(head,cnt/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	return Judge(head, cnt/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	Reverse(head,cnt/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	return Judge(head,cnt/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Judge&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ListNode* head, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; beg)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	ListNode* rightHead = head;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(beg--)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    		rightHead = rightHead-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	ListNode* leftHead = head;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(leftHead &amp;amp;&amp;amp; rightHead)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(leftHead-&amp;gt;val != rightHead-&amp;gt;val)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    			return &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    		leftHead = leftHead-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    		rightHead = rightHead-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	return &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;GetLength&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ListNode* head)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; cnt = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	ListNode* p = head;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(p!=&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    		cnt++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    		p = p-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	return cnt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Reverse&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ListNode* head, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; beg)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	ListNode* st = head;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(beg--)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    		st = st-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	ListNode* pre = st-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	ListNode* cur = pre-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	ListNode* tmp = &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(cur)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    		pre-&amp;gt;next = cur-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    		tmp = st-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    		st-&amp;gt;next = cur;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    		cur-&amp;gt;next = tmp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    		cur = pre-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;今天看了ICPC-2016WF，瞬间又燃起了刷题的兴趣。研一的时候玩了好几个月，后来由于忙其它的东西就不怎么刷题了。&lt;/p&gt;
&lt;p&gt;这道题是判断链表是否是回文，需要0(N)时间复杂度，0(1)空间复杂度。&lt;br&gt;阶梯思路想到了比较简单，先翻转一半链表，再双指针判断即可。&lt;/
    
    </summary>
    
    
      <category term="数据结构" scheme="http://dreamwuhi.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>网易面试之Windows开发实习</title>
    <link href="http://dreamwuhi.github.io/2016/04/14/%E7%BD%91%E6%98%93%E9%9D%A2%E8%AF%95%E4%B9%8BWindows%E5%BC%80%E5%8F%91%E5%AE%9E%E4%B9%A0/"/>
    <id>http://dreamwuhi.github.io/2016/04/14/网易面试之Windows开发实习/</id>
    <published>2016-04-14T13:45:22.000Z</published>
    <updated>2016-04-14T14:21:44.359Z</updated>
    
    <content type="html">&lt;p&gt;今天完成了人生中的第一次正规面试，貌似来的真的太晚了。本人半路出家，本科四年只学过C语言，考研那会才真正开始踏入CS专业的道路。&lt;br&gt;研一刚进来的时候，那叫一个菜啊，真的菜。连VS2010才从研一的时候开始用，以前都用VC6.0，真是呵呵哒了。自己的研究方向是图像处理，啥都不知道，先从Opencv自学开始，自己慢慢地摸索，虽然进度很慢，但是到现在为止自己感觉真的是进步蛮大的。&lt;br&gt;研一，自学了数据结构，Leetcode刷了一大半，那时只剩30道左右没又刷了。自学了MFC,写了一个图书馆管理系统。积累了一些图形图像的基本知识及相关机器学习的算法。&lt;br&gt;研二，重点学了Linux,深入C++的理解，看了《C++ Primer》，《Effective C++》,&amp;lt;&amp;lt;深度探索C++对象模型&amp;gt;&amp;gt;，《C和指针》。&lt;br&gt;通过网易云课堂，看了很多择善教育的Win32编程视频，随后自己开始Windows编程的学习，主要看了《Windows程序设计》上下版，《Windows核心编程》&lt;br&gt;对了，最重要的是着重了解Duilib开源框架，这个是用C++，在Win32上封装的一个UI库。写界面真的是比用原生Win32或MFC开发简单了很多倍，重点还更漂亮！&lt;/p&gt;
&lt;p&gt;好了，以上大概就是我的学习经历，其实说实话，自己的知识面还是很窄的。对于网络，数据库，操作系统（略了解）都是很欠缺的，今天在面试的时候，这方面的内容我都回答不出来。接下来需要重点来学习下！！&lt;/p&gt;
&lt;p&gt;好了，说重点吧，今天的面试过程。&lt;br&gt;今天的面试分三轮，前两轮是技术面，最后一面是HR面，如果前两轮不好的话，就没有HR面了~~&lt;br&gt;博主今天很早就到了网易，打了个顺风车，在车上还使劲地看一些排序算法，面试一个都没问到，呵呵哒了~~&lt;br&gt;到了11点的时候终于轮到我面试了，面试官是一个比较年轻的小哥，我先简单的自我介绍，面试官看到我的项目上用了duilib,他就开始对duilib展开提问。&lt;br&gt;后来，才发现原来最近他们部门在重新邮件客户端，用的UI库就是这个，怪不得他一直问我这方面的问题，足足是一个小时啊。&lt;br&gt;首先，他问我对duilib了解，然后我就简单说了duilib的特点及其与原生Win32窗口程序开发的区别。说的比较浅，面试官不是很满意，然后他说duilib最大的特点应该是消息机制的实现，其实我知道是这个，但是我说不清具体怎么实现的，所以我也就没说。&lt;br&gt;第二个问题，他问我duilib的组织结构。&lt;br&gt;第三个问题，duilib xml的解析&lt;br&gt;第四个问题，EventSeletc模型的特点&lt;br&gt;第五个问题，客户端怎么处理服务器发送过来的数据交给UI线程&lt;br&gt;第六个问题，自定义的消息结构是怎么样的&lt;br&gt;第七个问题，当出现异常的消息内容，如何处理&lt;br&gt;第八个问题，一道算法题，大致内容是给我一段字符串，里面包括一些表情，一些文本，如何解析文本及表情，以及一些边界等特殊情况的处理。&lt;br&gt;第九个问题，如何高效的处理XML解析后，控件的创建&lt;br&gt;第十个问题，虚函数与重载的区别，及深层含义&lt;br&gt;一面大概就是这些问题。&lt;/p&gt;
&lt;p&gt;二面的时候，面试官也比较年轻。&lt;br&gt;一问，除了EnentSelect网络模型还了解什么模型，我答了IO重叠模型，和IOCP模型，然后重点分析了IOCP模型的过程及特点。面试官比较满意&lt;br&gt;二问，线程同步的机制&lt;br&gt;三问，智能指针&lt;br&gt;四问，智能指针auto_ptr的实现，手写！&lt;br&gt;五问，一道编程题，输出结果。重点考察的一个虚函数表的特性&lt;br&gt;六问，父类虚的析构函数的作用，以及把父类的析构函数都定义成虚函数会怎么样&lt;br&gt;七问，不让调用构造函数的方法&lt;br&gt;八问，数据与UI的交互&lt;br&gt;九问，设断点程序会停下来的原理&lt;br&gt;十问，貌似没了，我问了他两个问题就结束了。&lt;/p&gt;
&lt;p&gt;HR面，随便聊聊。。&lt;/p&gt;
&lt;p&gt;就这样，等结果了~~~&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;今天完成了人生中的第一次正规面试，貌似来的真的太晚了。本人半路出家，本科四年只学过C语言，考研那会才真正开始踏入CS专业的道路。&lt;br&gt;研一刚进来的时候，那叫一个菜啊，真的菜。连VS2010才从研一的时候开始用，以前都用VC6.0，真是呵呵哒了。自己的研究方向是图像处理，啥
    
    </summary>
    
      <category term="面试" scheme="http://dreamwuhi.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="Windows" scheme="http://dreamwuhi.github.io/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>数据结构-链表旋转</title>
    <link href="http://dreamwuhi.github.io/2016/04/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8%E6%97%8B%E8%BD%AC/"/>
    <id>http://dreamwuhi.github.io/2016/04/13/数据结构-链表旋转/</id>
    <published>2016-04-13T09:58:37.000Z</published>
    <updated>2016-04-13T10:12:14.165Z</updated>
    
    <content type="html">&lt;hr&gt;
&lt;h1 id=&quot;链表旋转&quot;&gt;&lt;a href=&quot;#链表旋转&quot; class=&quot;headerlink&quot; title=&quot;链表旋转&quot;&gt;&lt;/a&gt;链表旋转&lt;/h1&gt;&lt;p&gt;链表旋转有指定一段旋转，也有整个链表旋转。我这边讲述下整个链表旋转，因为核心的思想都是一样的。&lt;/p&gt;
&lt;h2 id=&quot;核心思想&quot;&gt;&lt;a href=&quot;#核心思想&quot; class=&quot;headerlink&quot; title=&quot;核心思想&quot;&gt;&lt;/a&gt;核心思想&lt;/h2&gt;&lt;p&gt;构建三个指针head,pre,cur。&lt;br&gt;其中，head-&amp;gt;next指向我们待旋转链表的头结点。pre指向头结点。cur指向第二个结点。&lt;br&gt;每一次的操作都是一样的，如下&lt;br&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;tmp = head-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pre-&amp;gt;next = cur-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;head-&amp;gt;next = cur;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cur-&amp;gt;next = tmp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cur = pre-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;理解了上面的核心代码，链表旋转就完成一大半了，剩下要做的就是让链表循环起来及一些边界条件的判断，如下&lt;br&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; ListNode&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; ListNode* next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; val;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ListNode(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n) : val(n) , next(&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;ListNode* &lt;span class=&quot;title&quot;&gt;reserve&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ListNode* root)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!root || !root-&amp;gt;next) return root;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ListNode* head = new ListNode(&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;);  &lt;span class=&quot;comment&quot;&gt;//新建一个结点指向我们待旋转链表的头结点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    head-&amp;gt;next = root;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ListNode* pre = root;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ListNode* cur = root-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ListNode* tmp = &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(cur)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        tmp = head-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        pre-&amp;gt;next = cur-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        head-&amp;gt;next = cur;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cur-&amp;gt;next = tmp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cur = pre-&amp;gt;next;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    tmp = head-&amp;gt;next;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt; head;		&lt;span class=&quot;comment&quot;&gt;//旋转完，释放新建的结点，防止内存泄露&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    head = &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return tmp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;hr&gt;
&lt;h1 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h1&gt;&lt;p&gt;关于链表的一些操作其实还是算简单的，只要搞清楚了链表结点之间的指向关系，一般都可以搞定~~&lt;/p&gt;
&lt;hr&gt;
</content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h1 id=&quot;链表旋转&quot;&gt;&lt;a href=&quot;#链表旋转&quot; class=&quot;headerlink&quot; title=&quot;链表旋转&quot;&gt;&lt;/a&gt;链表旋转&lt;/h1&gt;&lt;p&gt;链表旋转有指定一段旋转，也有整个链表旋转。我这边讲述下整个链表旋转，因为核心的思想都是一样的。&lt;/p&gt;
&lt;h2 i
    
    </summary>
    
      <category term="数据结构" scheme="http://dreamwuhi.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://dreamwuhi.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>多线程同步之内核模式</title>
    <link href="http://dreamwuhi.github.io/2016/04/12/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5%E4%B9%8B%E5%86%85%E6%A0%B8%E6%A8%A1%E5%BC%8F%C2%9D/"/>
    <id>http://dreamwuhi.github.io/2016/04/12/多线程同步之内核模式/</id>
    <published>2016-04-12T08:19:23.000Z</published>
    <updated>2016-04-12T10:15:38.909Z</updated>
    
    <content type="html">&lt;hr&gt;
&lt;p&gt;本文主要是对内核模式下的多线程机制进行讲述。与用户模式下的同步机制相比，使用内核对象的同步机制用途更加广泛。&lt;/p&gt;
&lt;hr&gt;
&lt;hr&gt;
&lt;h1 id=&quot;内核对象包括以下几类&quot;&gt;&lt;a href=&quot;#内核对象包括以下几类&quot; class=&quot;headerlink&quot; title=&quot;内核对象包括以下几类&quot;&gt;&lt;/a&gt;内核对象包括以下几类&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;进程&lt;/li&gt;
&lt;li&gt;线程&lt;/li&gt;
&lt;li&gt;作业&lt;/li&gt;
&lt;li&gt;事件&lt;/li&gt;
&lt;li&gt;可等待的计时器&lt;/li&gt;
&lt;li&gt;信号量&lt;/li&gt;
&lt;li&gt;互斥量&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;hr&gt;
&lt;h1 id=&quot;等待函数&quot;&gt;&lt;a href=&quot;#等待函数&quot; class=&quot;headerlink&quot; title=&quot;等待函数&quot;&gt;&lt;/a&gt;等待函数&lt;/h1&gt;&lt;p&gt;在使用内核对象的同步机制时，就要用到等待函数来判断内核对象是否已经触发，这样就可以确定调用线程是否可被调度。&lt;/p&gt;
&lt;h2 id=&quot;WaitForSingleObject&quot;&gt;&lt;a href=&quot;#WaitForSingleObject&quot; class=&quot;headerlink&quot; title=&quot;WaitForSingleObject&quot;&gt;&lt;/a&gt;WaitForSingleObject&lt;/h2&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;DWORD &lt;span class=&quot;title&quot;&gt;WaitForSingleObject&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(HANDLE hObject, DWORD dwMilliseconds)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;hObject：表示要等待的内核对象&lt;/li&gt;
&lt;li&gt;dwMilliseconds：表示线程愿意花费多少时间来等待对象被触发（时间单位：毫秒），INFINITE表示无限等待  &lt;/li&gt;
&lt;li&gt;函数的返回值：如果线程等待的对象被触发了，则返回WAIT_object_0; 如果因为等待超时，返回WAIT_TIMEOUT; 如果给函数传入的是无限的句柄，则返回WAIT_FAILED;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;WaitForMultipleObject&quot;&gt;&lt;a href=&quot;#WaitForMultipleObject&quot; class=&quot;headerlink&quot; title=&quot;WaitForMultipleObject&quot;&gt;&lt;/a&gt;WaitForMultipleObject&lt;/h2&gt;&lt;p&gt;与WaitForSingleObject不同之处，WaitForMultipleObject可以等待多个内核对象。&lt;br&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;DWORD &lt;span class=&quot;title&quot;&gt;WaitForMultipleObject&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		DWORD dwCount,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		CONST HANDLE* phObjects,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		BOOL  bWaitAll, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		DWORD dwMilliseconds)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dwCount：等待内核对象的数量&lt;/li&gt;
&lt;li&gt;phObjects：指针，指向内核对象句柄数组&lt;/li&gt;
&lt;li&gt;bWaitAll： TRUE,等待所有的内核对象都触发时才返回；FALSE，只要有一个内核对象触发就返回&lt;/li&gt;
&lt;li&gt;dwMilliseconds：表示线程愿意花费多少时间来等待对象被触发（时间单位：毫秒），INFINITE表示无限等待 &lt;/li&gt;
&lt;li&gt;WaitForMultipleObject的返回值：WAIT_TIMEOUT、WAIT_FAILED与WaitForSingleObject相同；如果设置的是任意一个内核对象触发就返回的话，则返回值是[WAIT_object_0,WAIT_object_0+dwCount-1]，得到的数值是内核句柄数组的一个索引；&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;hr&gt;
&lt;h1 id=&quot;事件内核对象&quot;&gt;&lt;a href=&quot;#事件内核对象&quot; class=&quot;headerlink&quot; title=&quot;事件内核对象&quot;&gt;&lt;/a&gt;事件内核对象&lt;/h1&gt;&lt;p&gt;事件内核对象包括一个使用计数，一个是否是自动重置事件还是手动重置事件的布尔值，以及另一个表示事件有没有被触发的布尔值。&lt;br&gt;手动重置事件被触发的时候，正在等待该事件的所有线程都讲变成可调度状态。&lt;br&gt;自动重置事件被触发的时候，只要一个正在等待该事件的线程会变成可调度状态。&lt;/p&gt;
&lt;h2 id=&quot;事件内核对象的创建&quot;&gt;&lt;a href=&quot;#事件内核对象的创建&quot; class=&quot;headerlink&quot; title=&quot;事件内核对象的创建&quot;&gt;&lt;/a&gt;事件内核对象的创建&lt;/h2&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;HANDLE &lt;span class=&quot;title&quot;&gt;CreateEvent&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		PSECURITY_ATTRIBUTES psa,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		BOOL bManualReset,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		BOOL bInitialState,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		PCTSTR pszName)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;bManualReset:表示是否创建手动重置对象&lt;/li&gt;
&lt;li&gt;bInitialState:事件初始化为触发状态(TRUE)还是未触发状态(FALSE)&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;BOOL &lt;span class=&quot;title&quot;&gt;SetEvent&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(HANDLE hEvent)&lt;/span&gt;&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//设置事件触发状态&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;BOOL &lt;span class=&quot;title&quot;&gt;ResetEvent&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(HANDLE hEvent)&lt;/span&gt;&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//设置事件未触发状态&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;hr&gt;
&lt;h1 id=&quot;信号量内核对象&quot;&gt;&lt;a href=&quot;#信号量内核对象&quot; class=&quot;headerlink&quot; title=&quot;信号量内核对象&quot;&gt;&lt;/a&gt;信号量内核对象&lt;/h1&gt;&lt;p&gt;信号量内核对象用来对资源进行计数。包含一个使用计数，一个最大资源计数和一个目前资源使用计数。&lt;/p&gt;
&lt;h2 id=&quot;信号量的规则：&quot;&gt;&lt;a href=&quot;#信号量的规则：&quot; class=&quot;headerlink&quot; title=&quot;信号量的规则：&quot;&gt;&lt;/a&gt;信号量的规则：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;如果当前资源计数大于0，那么信号量处于触发状态&lt;/li&gt;
&lt;li&gt;如果当前资源计数等于0，那么信号量处于未触发状态&lt;/li&gt;
&lt;li&gt;系统绝对不会让当前资源计数变为负数&lt;/li&gt;
&lt;li&gt;当前资源计数绝对不会大于最大资源计数&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;信号量内核对象的创建&quot;&gt;&lt;a href=&quot;#信号量内核对象的创建&quot; class=&quot;headerlink&quot; title=&quot;信号量内核对象的创建&quot;&gt;&lt;/a&gt;信号量内核对象的创建&lt;/h2&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;HANDLE &lt;span class=&quot;title&quot;&gt;CreateSemaphore&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		PSECURITY_ATTRIBUTES psa,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		LONG lInitialCount,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		LONG lMaximumCount,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		PCTSTR pszName)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;lMaximumCount: 资源的最大使用数量&lt;/li&gt;
&lt;li&gt;lInitialCount: 初始化时资源中有多少可以使用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每当线程成功等待信号量内核对象，则会将当前使用计数减1，最后线程还要调用ReleaseSemaphore来递增信号量的当前资源使用计数。&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;BOOL &lt;span class=&quot;title&quot;&gt;ReleaseSemaphore&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(HANDLE hSemaphore,LONG lReleaseCount,PLONG plRreviousCount)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//此函数把lReleaseCount的值加到信号量的当前资源计数上，plRreviousCount返回当前资源计数的原始值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;hr&gt;
&lt;h1 id=&quot;互斥量内核对象&quot;&gt;&lt;a href=&quot;#互斥量内核对象&quot; class=&quot;headerlink&quot; title=&quot;互斥量内核对象&quot;&gt;&lt;/a&gt;互斥量内核对象&lt;/h1&gt;&lt;p&gt;互斥量内核对象用来确保一个一个线程独占对一个资源的访问。互斥量对象包含一个使用计数，线程ID，递归计数。&lt;br&gt;其中，线程ID用了标识当前占用互斥量的是系统中的哪一个线程，递归计数标识这个线程占用该互斥量的次数。&lt;/p&gt;
&lt;h2 id=&quot;互斥量对象的规则：&quot;&gt;&lt;a href=&quot;#互斥量对象的规则：&quot; class=&quot;headerlink&quot; title=&quot;互斥量对象的规则：&quot;&gt;&lt;/a&gt;互斥量对象的规则：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;如果线程ID为0，那么该互斥对象不为任何线程所占用，它处于触发状态&lt;/li&gt;
&lt;li&gt;如果线程ID非零值，那么有一个线程已经占用了该互斥量，它处于未触发状态&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;互斥量对象的创建&quot;&gt;&lt;a href=&quot;#互斥量对象的创建&quot; class=&quot;headerlink&quot; title=&quot;互斥量对象的创建&quot;&gt;&lt;/a&gt;互斥量对象的创建&lt;/h2&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;HANDLE &lt;span class=&quot;title&quot;&gt;CreateMutex&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		PSECURITY_ATTRIBUTES psa,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		BOOL bInitialOwner,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		PCTSTR pszName)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;bInitialOwner: 互斥量对象的初始状态。FALSE,互斥量对象的线程ID为0，递归计数为0，处于触发状态。&lt;br&gt;互斥内核对象的一个特点：系统会检查当前线程的ID与互斥量内部记录的线程ID是否相同。如果ID一致，那么系统会让线程保持可调度状态，即使互斥量尚未触发。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;BOOL &lt;span class=&quot;title&quot;&gt;ReleaseMutex&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(HANDLE hMutex)&lt;/span&gt;&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//释放互斥量，互斥量内部的线程ID置0，递归计数置0，互斥量变成触发状态&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
</content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;本文主要是对内核模式下的多线程机制进行讲述。与用户模式下的同步机制相比，使用内核对象的同步机制用途更加广泛。&lt;/p&gt;
&lt;hr&gt;
&lt;hr&gt;
&lt;h1 id=&quot;内核对象包括以下几类&quot;&gt;&lt;a href=&quot;#内核对象包括以下几类&quot; class=&quot;headerlink&quot; ti
    
    </summary>
    
      <category term="多线程" scheme="http://dreamwuhi.github.io/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="多线程" scheme="http://dreamwuhi.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>多线程同步</title>
    <link href="http://dreamwuhi.github.io/2016/04/11/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5/"/>
    <id>http://dreamwuhi.github.io/2016/04/11/多线程同步/</id>
    <published>2016-04-11T15:19:47.000Z</published>
    <updated>2016-04-12T07:02:28.215Z</updated>
    
    <content type="html">&lt;hr&gt;
&lt;p&gt;本文主要讲了用户模式下的线程同步机制，用户模式下的同步最大的好处是速度快。此外还有内核状态下的同步机制将放在写一篇博客中讲述！&lt;/p&gt;
&lt;h1 id=&quot;原子访问&quot;&gt;&lt;a href=&quot;#原子访问&quot; class=&quot;headerlink&quot; title=&quot;原子访问&quot;&gt;&lt;/a&gt;&lt;strong&gt;原子访问&lt;/strong&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;指的是一个线程在访问某个资源的&lt;font color=&quot;red&quot;&gt;同时&lt;/font&gt;能够保证没有其他线程会在同一时刻访问同一资源。&lt;br&gt;Interlocked系列的函数可以保证是原子操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;hr&gt;
&lt;h1 id=&quot;高级线程同步&quot;&gt;&lt;a href=&quot;#高级线程同步&quot; class=&quot;headerlink&quot; title=&quot;高级线程同步&quot;&gt;&lt;/a&gt;&lt;strong&gt;高级线程同步&lt;/strong&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;当线程想要访问某一共享资源的时候，线程必须调用系统函数，将线程想要访问的东西作为参数传递给函数。如果操作系统检测到资源可以被访问，那么这个函数会立即返回。这样线程就编程可调度状态。如果无法访问该共享资源，那么系统会将线程切换到等待状态，使线程变得不可调度，从而避免线程浪费CPU的时间。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;hr&gt;
&lt;h1 id=&quot;关键代码段&quot;&gt;&lt;a href=&quot;#关键代码段&quot; class=&quot;headerlink&quot; title=&quot;关键代码段&quot;&gt;&lt;/a&gt;&lt;strong&gt;关键代码段&lt;/strong&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;这种方式让多行代码以原子的方式对资源进行操控。&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;CRITICAL_SECTION g_cs 	&lt;span class=&quot;comment&quot;&gt;//初始化关键代码段结构&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;InitializeCriticalSection(g_cs);    &lt;span class=&quot;comment&quot;&gt;//初始化&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;EnterCriticalSection(&amp;amp;g_cs);    &lt;span class=&quot;comment&quot;&gt;//进入关键代码段&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LeaveCriticalSection(&amp;amp;g_cs);    &lt;span class=&quot;comment&quot;&gt;//离开关键代码段&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DeleteCriticalSection(g_cs);    &lt;span class=&quot;comment&quot;&gt;//删除&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;hr&gt;
&lt;h1 id=&quot;关键段与旋转锁&quot;&gt;&lt;a href=&quot;#关键段与旋转锁&quot; class=&quot;headerlink&quot; title=&quot;关键段与旋转锁&quot;&gt;&lt;/a&gt;&lt;strong&gt;关键段与旋转锁&lt;/strong&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;当线程试图进入一个关键段，但这个关键段正被另一个线程占用的时候，函数会立即把调用线程切换到等待状态。这意味着线程必须从用户模式切换到内核模式（消耗大约1000个CPU周期）。这个切换的开销非常大。在配有多处理器的机器中，当前占用资源的线程可能在另一个线程完全切换到内核状态前就释放了占用的资源。如果真发生这种情况，那么会消耗大量的CPU周期。&lt;br&gt;因此在关键代码段中加入旋转锁来解决此问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;BOOL &lt;span class=&quot;title&quot;&gt;InitializeCriticalSectionAndSpinCount&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(PCRITICAL_SECTION pcs, DWORD dwSpinCount)&lt;/span&gt;&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//dwSpinCount 表示旋转锁循环的次数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;hr&gt;
&lt;h1 id=&quot;Slim读-写锁&quot;&gt;&lt;a href=&quot;#Slim读-写锁&quot; class=&quot;headerlink&quot; title=&quot;Slim读/写锁&quot;&gt;&lt;/a&gt;&lt;strong&gt;Slim读/写锁&lt;/strong&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;SRWLock允许我们区分那些想要读取资源值的线程（读取者线程）和想要更新资源值的线程（写入者线程）。让所有读取者线程同一时刻访问资源是可行的，因为不会破坏数据。写入者线程应该独占资源的访问权，任何其他读取者线程与写入者线程都不允许访问该资源。这就是SRWLock锁的关不内容。&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;VOID &lt;span class=&quot;title&quot;&gt;InitializeSRWLock&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(PSRWLOCK SRWLock)&lt;/span&gt;&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//初始化&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//写入者线程访问&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;VOID &lt;span class=&quot;title&quot;&gt;AcquireSRWLockExclusive&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(PSRWLOCK SRWLock)&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//读&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;VOID &lt;span class=&quot;title&quot;&gt;ReleaseSRWLockExclusive&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(PSRWLOCK SRWLock)&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//释放&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//读取者线程访问&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;VOID &lt;span class=&quot;title&quot;&gt;AcquireSRWLockShared&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(PSRWLOCK SRWLock)&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//读&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;VOID &lt;span class=&quot;title&quot;&gt;ReleaseSRWLockShared&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(PSRWLOCK SRWLock)&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//释放&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
</content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;本文主要讲了用户模式下的线程同步机制，用户模式下的同步最大的好处是速度快。此外还有内核状态下的同步机制将放在写一篇博客中讲述！&lt;/p&gt;
&lt;h1 id=&quot;原子访问&quot;&gt;&lt;a href=&quot;#原子访问&quot; class=&quot;headerlink&quot; title=&quot;原子访问&quot;&gt;&lt;/
    
    </summary>
    
      <category term="多线程" scheme="http://dreamwuhi.github.io/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="多线程，C++" scheme="http://dreamwuhi.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B%EF%BC%8CC/"/>
    
  </entry>
  
  <entry>
    <title>C++基础知识(1)</title>
    <link href="http://dreamwuhi.github.io/2016/04/11/C++%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86(1)/"/>
    <id>http://dreamwuhi.github.io/2016/04/11/C++基础知识(1)/</id>
    <published>2016-04-11T08:09:22.000Z</published>
    <updated>2016-04-11T10:08:41.235Z</updated>
    
    <content type="html">&lt;h3 id=&quot;New和Delete&quot;&gt;&lt;a href=&quot;#New和Delete&quot; class=&quot;headerlink&quot; title=&quot;New和Delete&quot;&gt;&lt;/a&gt;New和Delete&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;内置类型对象或未提供默认构造函数的类类型对象必须显示初始化&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;int* a = new int;		//a未初始化&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int* b = new int();		//b初始化为0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;delete后，应该将指针赋值为NULL，否则该指针成为“悬垂指针”，悬垂指针是指向曾经存放对象的内存，但该对象已经不再存在了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;C++保证：删除0值的指针是安全的&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;显示类型转换&quot;&gt;&lt;a href=&quot;#显示类型转换&quot; class=&quot;headerlink&quot; title=&quot;显示类型转换&quot;&gt;&lt;/a&gt;显示类型转换&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;调用方式：&lt;/strong&gt; cast-name&lt;type&gt;(expression)&lt;/type&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;static_cast&lt;/strong&gt;&lt;br&gt;  编译器隐式的执行任何类型转换&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;void* p = &amp;amp;d;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;double* dp = static_cast&amp;lt;double*&amp;gt;p;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;dynamic_cast&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;const_cast&lt;/strong&gt;&lt;br&gt;  转换掉表达式的const性质&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;reinterpret_cast&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;类成员函数的重载&quot;&gt;&lt;a href=&quot;#类成员函数的重载&quot; class=&quot;headerlink&quot; title=&quot;类成员函数的重载&quot;&gt;&lt;/a&gt;类成员函数的重载&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;函数名相同，函数的参数不同，返回值可以不同。注意：基于成员函数是否为const,可以重载一个成员函数&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;类的inline函数&quot;&gt;&lt;a href=&quot;#类的inline函数&quot; class=&quot;headerlink&quot; title=&quot;类的inline函数&quot;&gt;&lt;/a&gt;类的inline函数&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;编译器会自动展开函数的定义。注意点：一般函数的代码量很小，且该函数会被经常调用。同时，该函数的定义必须被调用它的源文件可见。通常，内联函数的定义是放在某公共头文件中。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;类的成员使用类声明&quot;&gt;&lt;a href=&quot;#类的成员使用类声明&quot; class=&quot;headerlink&quot; title=&quot;类的成员使用类声明&quot;&gt;&lt;/a&gt;类的成员使用类声明&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;只有当类的定义已经在前面出现过数据成员才能被指定为该类类型。如果该类型是不完全类型（即只声明未定义），那么数据成员只能是指向该类类型的指针或者是引用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;类的构造函数初始化&quot;&gt;&lt;a href=&quot;#类的构造函数初始化&quot; class=&quot;headerlink&quot; title=&quot;类的构造函数初始化&quot;&gt;&lt;/a&gt;类的构造函数初始化&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;构造函数的初始化列表会在构造函数体内语句之前运行。&lt;/li&gt;
&lt;li&gt;如果没有显式初始化列表，那么对于类类型的成员变量使用该成员变量的默认构造函数初始化。对于内置类型或者是复合类型的成员变量根据对象是否为全局而定。（全局对象则会初始化，局部对象不会初始化）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注意&lt;/strong&gt;：对于const成员变量或者是引用类型成员变量及没有默认构造函数的类类型成员变量必须在显式初始化列表。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;构造函数的隐式转换&quot;&gt;&lt;a href=&quot;#构造函数的隐式转换&quot; class=&quot;headerlink&quot; title=&quot;构造函数的隐式转换&quot;&gt;&lt;/a&gt;构造函数的隐式转换&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;一般只带一个参数的构造函数会出现隐式转换，或者是构造函数的第二参数带有默认值&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class A&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 A()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 A(int a)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		num = a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;private:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	int num;	 	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;A a = 12 //隐式的调用构造函数，再调用复制构造函数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;A b(12); //显示的调用构造函数&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;隐式转换一般会带来不好的影响，最好的处理方法是加上&lt;strong&gt;explicit&lt;/strong&gt;关键字，指定构造函数不能隐式转换。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;友元&quot;&gt;&lt;a href=&quot;#友元&quot; class=&quot;headerlink&quot; title=&quot;友元&quot;&gt;&lt;/a&gt;友元&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;允许一个类将对其非公有成员的访问授予指定的函数或类&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;static类成员&quot;&gt;&lt;a href=&quot;#static类成员&quot; class=&quot;headerlink&quot; title=&quot;static类成员&quot;&gt;&lt;/a&gt;static类成员&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;非static数据成员存在于类类型的每一个对象中。static数据成员独立于该类的任意对象而存在；每个static数据成员与类关联的对象，并不与类的对象关联。&lt;/li&gt;
&lt;li&gt;static成员函数只能访问static成员变量，不能直接使用非static成员变量。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;复制构造函数&quot;&gt;&lt;a href=&quot;#复制构造函数&quot; class=&quot;headerlink&quot; title=&quot;复制构造函数&quot;&gt;&lt;/a&gt;复制构造函数&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;调用时间&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根据另一个同类型的对象显示或者是隐式初始化一个对象&lt;/li&gt;
&lt;li&gt;复制一个对象，将它作为实参传给一个函数&lt;/li&gt;
&lt;li&gt;从函数返回时复制对象&lt;/li&gt;
&lt;li&gt;&lt;p&gt;初始化顺序容器中的元素&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;std::vector&amp;lt;std::string&amp;gt;(10);//先调用string的默认构造函数，再调用复制构造函数&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;根据元素初始化式初列表初始化数组元素&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;A a[] = &amp;#123;std::string(&amp;quot;abc&amp;quot;),std::string(&amp;quot;bca&amp;quot;)&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//首先调用A中接受string形参的构造函数初始化一个临时对象，再调用A的复制构造函数初始化&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;具体例子&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;string null_book = &amp;quot;99999&amp;quot;;//首先调用接受一个C风格字符串形参的构造函数，再调用复制构造函数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;string empty_copy = string();//首先调用默认构造函数，再调用复制构造函数&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;智能指针&quot;&gt;&lt;a href=&quot;#智能指针&quot; class=&quot;headerlink&quot; title=&quot;智能指针&quot;&gt;&lt;/a&gt;智能指针&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;当类中含有指针成员的时候，不重写赋值构造函数，复制构造函数，析构函数的话，很容易使程序崩溃&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;原因：&lt;/strong&gt; 编译器为我们合成的复制、赋值函数，都只是浅层拷贝，不是深层拷贝（指针指向同一个对象），因此往往会在析构的时候，出现异常。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;解决方法1：&lt;/strong&gt;定义智能指针，引入&lt;strong&gt;使用计数&lt;/strong&gt;概念&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class U_Ptr&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;private:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	friend class HasPtr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	int *ip;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	size_t use;//使用计数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	U_Ptr(int* p) : ip(p) , use(1) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	~U_Ptr()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		delete ip;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class HasPtr&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	HasPtr(int*p , int i) : ptr(new U_Ptr(p)) , val(i) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	HasPtr(const HasPtr&amp;amp; orig) : ptr(orig.ptr), val(orig.val) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ptr-&amp;gt;use++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	HasPtr&amp;amp; operator=(const HasPtr&amp;amp; rhs)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		++rhs.ptr-&amp;gt;use;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		if(--ptr-&amp;gt;use == 0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			delete ptr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ptr = rhs.ptr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		val = rhs.val;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		return *this;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	~HasPtr()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		if(--ptr-&amp;gt;use == 0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			delete ptr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;private:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	U_Ptr *ptr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	int val;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;解决方法2”&lt;/strong&gt;实现深层拷贝&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class HasPtr&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;private:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	int* ptr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	int val;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	HasPtr(const int&amp;amp; p, int i) : ptr(new int(p)) , val(i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	HasPtr(const HasPtr&amp;amp; orig) : ptr(new int(*orig.ptr)) , val(orig.val)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		//实现深拷贝&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	HasPtr&amp;amp; operator=(HasPtr&amp;amp; rhs)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ptr = rhs.ptr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		val = rhs.val;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		return *this;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;protected成员&quot;&gt;&lt;a href=&quot;#protected成员&quot; class=&quot;headerlink&quot; title=&quot;protected成员&quot;&gt;&lt;/a&gt;protected成员&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;基类的一些成员希望允许派生类访问但是禁止其他用户访问，对于这样的成员应使用受保护的访问标志&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注意点：&lt;/strong&gt;派生类只能通过派生类对象访问其基类的protected成员，派生类对其基类类型对象的protected成员没有特殊访问权限。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class Test_base&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Test_base()&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	~Test_base()&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;protected:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	int pb;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;private:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	int kk;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	/* data */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class Test_sun : public Test_base&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	void fun(Test_sun&amp;amp; t, Test_base&amp;amp; base)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		t.pb = 1;  //派生类对象可以访问基类的protected成员&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		base.pb = 1;//错误，基类类型的对象不能访问其protected对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		pb = 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;New和Delete&quot;&gt;&lt;a href=&quot;#New和Delete&quot; class=&quot;headerlink&quot; title=&quot;New和Delete&quot;&gt;&lt;/a&gt;New和Delete&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;内置类型对象或未提供默认构造函数的类类型对象必须显示初始化
    
    </summary>
    
      <category term="C++" scheme="http://dreamwuhi.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="http://dreamwuhi.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>duilib开发QQ界面</title>
    <link href="http://dreamwuhi.github.io/2016/04/10/duilib%E5%BC%80%E5%8F%91QQ%E7%95%8C%E9%9D%A2/"/>
    <id>http://dreamwuhi.github.io/2016/04/10/duilib开发QQ界面/</id>
    <published>2016-04-10T12:38:01.000Z</published>
    <updated>2016-04-11T10:38:53.598Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
      <category term="QQ界面开发" scheme="http://dreamwuhi.github.io/categories/QQ%E7%95%8C%E9%9D%A2%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="duilib" scheme="http://dreamwuhi.github.io/tags/duilib/"/>
    
      <category term="Win32" scheme="http://dreamwuhi.github.io/tags/Win32/"/>
    
  </entry>
  
  <entry>
    <title>Windows程序设计基础</title>
    <link href="http://dreamwuhi.github.io/2016/04/10/Windows%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/"/>
    <id>http://dreamwuhi.github.io/2016/04/10/Windows程序设计基础/</id>
    <published>2016-04-10T12:02:14.000Z</published>
    <updated>2016-04-11T10:39:50.525Z</updated>
    
    <content type="html">&lt;h2 id=&quot;窗口程序创建的过程&quot;&gt;&lt;a href=&quot;#窗口程序创建的过程&quot; class=&quot;headerlink&quot; title=&quot;窗口程序创建的过程&quot;&gt;&lt;/a&gt;窗口程序创建的过程&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;创建窗口类&quot;&gt;&lt;a href=&quot;#创建窗口类&quot; class=&quot;headerlink&quot; title=&quot;创建窗口类&quot;&gt;&lt;/a&gt;创建窗口类&lt;/h3&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;WNDCLASS wndclass;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h3 id=&quot;注册窗口类&quot;&gt;&lt;a href=&quot;#注册窗口类&quot; class=&quot;headerlink&quot; title=&quot;注册窗口类&quot;&gt;&lt;/a&gt;注册窗口类&lt;/h3&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;RegisterClass(&amp;amp;wndclass);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h3 id=&quot;创建窗口&quot;&gt;&lt;a href=&quot;#创建窗口&quot; class=&quot;headerlink&quot; title=&quot;创建窗口&quot;&gt;&lt;/a&gt;创建窗口&lt;/h3&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hwnd = CreateWindow(...);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h3 id=&quot;显示窗口&quot;&gt;&lt;a href=&quot;#显示窗口&quot; class=&quot;headerlink&quot; title=&quot;显示窗口&quot;&gt;&lt;/a&gt;显示窗口&lt;/h3&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ShowWindow(hwnd,iCmdShow);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h3 id=&quot;更新窗口&quot;&gt;&lt;a href=&quot;#更新窗口&quot; class=&quot;headerlink&quot; title=&quot;更新窗口&quot;&gt;&lt;/a&gt;更新窗口&lt;/h3&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;UpdateWindow(hwnd);  &lt;span class=&quot;comment&quot;&gt;//产生第一条WM_PATINT消息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h3 id=&quot;消息循环&quot;&gt;&lt;a href=&quot;#消息循环&quot; class=&quot;headerlink&quot; title=&quot;消息循环&quot;&gt;&lt;/a&gt;消息循环&lt;/h3&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(GetMessage(&amp;amp;msg,NULL,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;))  &lt;span class=&quot;comment&quot;&gt;//获取消息，只要消息类型不为WM_QUIT，返回值是非零值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	TranslateMessgae(&amp;amp;msg);     &lt;span class=&quot;comment&quot;&gt;//翻译消息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	DispatchMessage(&amp;amp;msg);      &lt;span class=&quot;comment&quot;&gt;//分发消息到窗口过程&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h3 id=&quot;窗口过程&quot;&gt;&lt;a href=&quot;#窗口过程&quot; class=&quot;headerlink&quot; title=&quot;窗口过程&quot;&gt;&lt;/a&gt;窗口过程&lt;/h3&gt;&lt;p&gt;窗口过程在处理消息时，必须返回0。窗口过程不予处理的所有消息应该被DefWindowProc函数处理&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;LRESULT CALLBACK &lt;span class=&quot;title&quot;&gt;WinProctor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(HWND hwnd, UINT message, WPARAM wparam, LPARAM lparam)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;SendMessage(...);&lt;span class=&quot;comment&quot;&gt;//程序可以直接调用自己的窗口过程&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;总结：窗口过程与一个窗口类相关联，窗口类是程序调用RegisterClass注册的。基于该类创建的窗口使用这个窗口过程来处理窗口的所有消息。Windows通过调用窗口过程来给窗口发送一个消息&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;窗口消息&quot;&gt;&lt;a href=&quot;#窗口消息&quot; class=&quot;headerlink&quot; title=&quot;窗口消息&quot;&gt;&lt;/a&gt;窗口消息&lt;/h2&gt;&lt;h3 id=&quot;WM-PAINT&quot;&gt;&lt;a href=&quot;#WM-PAINT&quot; class=&quot;headerlink&quot; title=&quot;WM_PAINT&quot;&gt;&lt;/a&gt;WM_PAINT&lt;/h3&gt;&lt;p&gt;该消息使得客户区域重绘，以下几种情况会导致客户区域重绘，即产生WM_PAINT消息。&lt;br&gt;1、UpdateWindow(hwnd);&lt;br&gt;2、放大或者是缩小窗口（窗口类风格具有CS_HREDRAW,CS_VREDRAW）。&lt;br&gt;3、窗口最小化后，再复原。&lt;br&gt;4、窗口被其他窗口覆盖后，再复原。&lt;br&gt;5、使用ScrollWindow或ScrollDC函数滚动客户区的一部分。&lt;br&gt;6、使用InvalidateRect或InvalidateRgn函数显示产生WM_PAINT消息。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;WM-DESTROY&quot;&gt;&lt;a href=&quot;#WM-DESTROY&quot; class=&quot;headerlink&quot; title=&quot;WM_DESTROY&quot;&gt;&lt;/a&gt;WM_DESTROY&lt;/h3&gt;&lt;p&gt;该消息使得窗口清除关闭。一般在获取该消息后，添加PostQuitMessage(0); 即，在消息队列中添加一条WM_QUIT消息。上文提到，消息循环中当遇到WM_QUIT消息后，就退出循环，结束程序。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;窗口程序创建的过程&quot;&gt;&lt;a href=&quot;#窗口程序创建的过程&quot; class=&quot;headerlink&quot; title=&quot;窗口程序创建的过程&quot;&gt;&lt;/a&gt;窗口程序创建的过程&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;创建窗口类&quot;&gt;&lt;a href=&quot;#创建窗口类&quot; class=&quot;h
    
    </summary>
    
      <category term="Windows开发" scheme="http://dreamwuhi.github.io/categories/Windows%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Win32" scheme="http://dreamwuhi.github.io/tags/Win32/"/>
    
  </entry>
  
  <entry>
    <title>duilib开发微信界面</title>
    <link href="http://dreamwuhi.github.io/2016/04/10/duilib%E5%BC%80%E5%8F%91%E5%BE%AE%E4%BF%A1%E7%95%8C%E9%9D%A2/"/>
    <id>http://dreamwuhi.github.io/2016/04/10/duilib开发微信界面/</id>
    <published>2016-04-10T10:16:23.000Z</published>
    <updated>2016-04-11T10:40:30.068Z</updated>
    
    <content type="html">&lt;h2 id=&quot;采用Duilib开源框架开发PC端微信&quot;&gt;&lt;a href=&quot;#采用Duilib开源框架开发PC端微信&quot; class=&quot;headerlink&quot; title=&quot;采用Duilib开源框架开发PC端微信&quot;&gt;&lt;/a&gt;采用Duilib开源框架开发PC端微信&lt;/h2&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;采用Duilib开源框架开发PC端微信&quot;&gt;&lt;a href=&quot;#采用Duilib开源框架开发PC端微信&quot; class=&quot;headerlink&quot; title=&quot;采用Duilib开源框架开发PC端微信&quot;&gt;&lt;/a&gt;采用Duilib开源框架开发PC端微信&lt;/h2&gt;
    
    </summary>
    
      <category term="微信界面开发" scheme="http://dreamwuhi.github.io/categories/%E5%BE%AE%E4%BF%A1%E7%95%8C%E9%9D%A2%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="duilib" scheme="http://dreamwuhi.github.io/tags/duilib/"/>
    
      <category term="Win32" scheme="http://dreamwuhi.github.io/tags/Win32/"/>
    
  </entry>
  
</feed>
